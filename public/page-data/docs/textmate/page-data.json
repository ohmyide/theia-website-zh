{"componentChunkName":"component---src-templates-doc-js","path":"/docs/textmate","result":{"data":{"markdownRemark":{"frontmatter":{"title":"TextMate Coloring"},"html":"<h1 id=\"theia-支持-textmate\" style=\"position:relative;\"><a href=\"#theia-%E6%94%AF%E6%8C%81-textmate\" aria-label=\"theia 支持 textmate permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Theia 支持 TextMate</h1>\n<p>TextMate 语法使我们能够准确地为大多数代码文件高亮显示，即使它只是在语法层面（没有语言深度\n理解）。语义着色可以由语言服务提供支持。</p>\n<p>TextMate 语法主要有两种格式：<code class=\"language-text\">.plist</code> 和 <code class=\"language-text\">.tmLanguage.json</code>，Theia 两者都支持。</p>\n<p><a href=\"https://macromates.com/manual/en/language_grammars\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">点击这里</a> 阅读有关 TextMate 语法的更多信息。</p>\n<blockquote>\n<p>注意：特定语言的语法应该放在该语言专用的扩展中。 <code class=\"language-text\">@theia/textmate-grammars</code> 目前没有任何特定扩展名的语言注册表。</p>\n</blockquote>\n<h2 id=\"添加新语法支持\" style=\"position:relative;\"><a href=\"#%E6%B7%BB%E5%8A%A0%E6%96%B0%E8%AF%AD%E6%B3%95%E6%94%AF%E6%8C%81\" aria-label=\"添加新语法支持 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>添加新语法支持</h2>\n<p>为新语言添加语法支持，通常的模式是在扩展的根目录下创建一个 <code class=\"language-text\">data</code> 文件夹，存储对应的语法文件：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">extension/\n    data/\n        grammars go here\n    lib/\n        ...\n    src/\n        ...\n    package.json\n    ...</code></pre></div>\n<p>然后，在 <code class=\"language-text\">package.json</code> 中，分别为源文件和构建后的文件语法，添加以下配置：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">  <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"lib\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"src\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>现在可以从扩展中，通过 <code class=\"language-text\">LanguageGrammarDefinitionContribution</code> 贡献能力。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">YourContribution</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LanguageGrammarDefinitionContribution</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">readonly</span> id <span class=\"token operator\">=</span> <span class=\"token string\">'languageId'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">readonly</span> scopeName <span class=\"token operator\">=</span> <span class=\"token string\">'source.yourLanguage'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">registerTextmateLanguage</span><span class=\"token punctuation\">(</span>registry<span class=\"token operator\">:</span> TextmateRegisty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">registerTextmateGrammarScope</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scopeName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">async</span> <span class=\"token function\">getGrammarDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                    format<span class=\"token operator\">:</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">,</span>\n                    content<span class=\"token operator\">:</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../data/yourGrammar.tmLanguage.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">mapLanguageIdToTextmateGrammar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scopeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果你使用 <code class=\"language-text\">.plist</code> 语法，则不能通过 <code class=\"language-text\">require</code> 直接获取内容，因为 Webpack 会改为从服务器获取的文件。在这种情况下，用下述方式可获取文件内容：</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">YourContribution</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LanguageGrammarDefinitionContribution</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">readonly</span> id <span class=\"token operator\">=</span> <span class=\"token string\">'languageId'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">readonly</span> scopeName <span class=\"token operator\">=</span> <span class=\"token string\">'source.yourLanguage'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">registerTextmateLanguage</span><span class=\"token punctuation\">(</span>registry<span class=\"token operator\">:</span> TextmateRegisty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">registerTextmateGrammarScope</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scopeName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">async</span> <span class=\"token function\">getGrammarDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../data/yourGrammar.plist'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n                    format<span class=\"token operator\">:</span> <span class=\"token string\">'plist'</span><span class=\"token punctuation\">,</span>\n                    content<span class=\"token operator\">:</span> <span class=\"token keyword\">await</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">mapLanguageIdToTextmateGrammar</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scopeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"textmate"}}},"pageContext":{"slug":"textmate"}},"staticQueryHashes":["2468095761"]}