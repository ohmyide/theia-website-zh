{"componentChunkName":"component---src-templates-doc-js","path":"/docs/events","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Events"},"html":"<h2 id=\"事件\" style=\"position:relative;\"><a href=\"#%E4%BA%8B%E4%BB%B6\" aria-label=\"事件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>事件</h2>\n<p>Theia 的事件可能比较混乱，希望我们能澄清它的逻辑。</p>\n<p>先看这段代码：</p>\n<p>(来自 logger-watcher.ts)</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoggerWatcher</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">getLoggerClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ILoggerClient <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> emitter <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onLogLevelChangedEmitter\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">onLogLevelChanged</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> ILogLevelChangedEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                emitter<span class=\"token punctuation\">.</span><span class=\"token function\">fire</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> onLogLevelChangedEmitter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Emitter<span class=\"token operator\">&lt;</span>ILogLevelChangedEvent<span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">get</span> <span class=\"token function\">onLogLevelChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Event<span class=\"token operator\">&lt;</span>ILogLevelChangedEvent<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onLogLevelChangedEmitter<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>先看这里：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">    <span class=\"token keyword\">private</span> onLogLevelChangedEmitter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Emitter<span class=\"token operator\">&lt;</span>ILogLevelChangedEvent<span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>首先什么是 <code class=\"language-text\">Emitter</code>？</p>\n<p>Emitter 是一个事件处理容器，它允许事件处理程序在其上注册，并通过 X 类型的事件触发，本例中是：ILogLevelChangedEvent。</p>\n<p>这里我们只是创建了一个 <code class=\"language-text\">Emitter</code>，它将拥有 ILogLevelChangedEvent 类型的事件。</p>\n<p>接下来我们希望能在这个 <code class=\"language-text\">Emitter</code> 上注册一个事件处理程序，像这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">    <span class=\"token keyword\">get</span> <span class=\"token function\">onLogLevelChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Event<span class=\"token operator\">&lt;</span>ILogLevelChangedEvent<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onLogLevelChangedEmitter<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>它实际上返回一个函数，注册一个事件处理程序，所以你只要把你的事件处理程序函数传给它，即可完成注册，当事件发生时它会被调用。</p>\n<p>所以你可以这么调用：</p>\n<p>(From logger.ts)</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"> <span class=\"token comment\">/* Update the root logger log level if it changes in the backend. */</span>\n        loggerWatcher<span class=\"token punctuation\">.</span><span class=\"token function\">onLogLevelChanged</span><span class=\"token punctuation\">(</span>event <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rootLoggerId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_logLevel <span class=\"token operator\">=</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>newLogLevel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这就在 emitter 上注册了作为参数传递的匿名函数。接下来，我们通过触发一个事件，来调用事件处理程序：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"> <span class=\"token function\">onLogLevelChanged</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">:</span> ILogLevelChangedEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                emitter<span class=\"token punctuation\">.</span><span class=\"token function\">fire</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span></code></pre></div>\n<p>当调用这个函数时，emitter 会启动，所有的事件处理程序都会被调用。</p>\n<p>小结一下，想要在 Theia 中触发事件，你需要：</p>\n<ul>\n<li>创建一个发射器</li>\n<li>用 emitter.event 函数注册事件</li>\n<li>用 emitter.fire(event) 触发事件</li>\n</ul>","fields":{"slug":"events"}}},"pageContext":{"slug":"events"}},"staticQueryHashes":["2468095761"]}