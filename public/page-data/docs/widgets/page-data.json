{"componentChunkName":"component---src-templates-doc-js","path":"/docs/widgets","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Widgets"},"html":"<h1 id=\"widgets\" style=\"position:relative;\"><a href=\"#widgets\" aria-label=\"widgets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Widgets</h1>\n<p>widget 是在 Theia 工作台面板上显示内容的部分，可能是一个视图或一个编辑器。Theia 中现有的 widget 例子是文件资源管理器、代码编辑器以及报错面板。通过扩展自定义的 widget，你可以在 Theia 应用中嵌入自定义 UI。你的自定义 UI 在窗口布局方面的行为与其他 widget 相同，包括标题标签、调整大小、拖动以及打开/关闭动作（见下面的截图）。</p>\n<img src=\"/widget-example.gif\" alt=\"Widget Example\" style=\"max-width: 525px\">\n<p>此外，widget 能从周边工作台上接收事件，例如，在应用启动时、在调整大小时或在销毁时。不过，一个 widget 的实际的内容展示信息，完全由自己定义。作为一个例子，你可以在一个 widget 中使用 React 实现一些自定义的 UI。</p>\n<p>简而言之，widget 是一个框架能力，用于将一些自定义（基于HTML的）UI 嵌入 Theia 工作台（见下图）。</p>\n<img src=\"/widget-architecture.png\" alt=\"Widget Architecture\" style=\"max-width: 525px\">\n<p>本文档将介绍如何为 Theia 工作台扩展一个自定义的 Widget。我们将专注实现一个简单的视图组件（而非复杂的代码编辑器），并使用 React 来实现界面 UI。</p>\n<p>如果你还不熟悉 Theia 的贡献点或依赖注入的使用机制，请参考 <a href=\"https://theia-ide.org/docs/services_and_contributions/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Services and Contributions</a> 指南。</p>\n<p>如果想看示例代码，请使用 <a href=\"https://github.com/eclipse-theia/generator-theia-extension\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Theia extension generator</a>。安装并选择 “Widget” 示例，输入 “MyWidget” 作为扩展名称。</p>\n<h2 id=\"实现一个-widget视图\" style=\"position:relative;\"><a href=\"#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-widget%E8%A7%86%E5%9B%BE\" aria-label=\"实现一个 widget视图 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现一个 Widget（视图）。</h2>\n<p>在例子中，要实现一个 Widget 需要由三个部分组成：</p>\n<ul>\n<li>一段完整的<b>widget</b>代码实现，包含：\n    <ul>\n    <li>基本参数，如 ID、label 和 icon图标</li>\n    <li>具体的 UI 实现和它的操作行为</li>\n    <li>处理生命周期事件，如 \"onUpdateRequest\" 或 \"onResize\"</li>\n    </ul>\n</li>\n<li>一个<b> Widget 类</b>用于产出 widget 实例</li>\n<li>一个<b> Widget 贡献点</b> 用于将视图与 Theia 工作台连接起来，以便可以从 Theia 工作台中打开 widget，比如通过视图菜单打开。</li>\n</ul>\n<h3 id=\"实现一个-widget\" style=\"position:relative;\"><a href=\"#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-widget\" aria-label=\"实现一个 widget permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现一个 Widget</h3>\n<p>为实现自定义 widgets，Theia 提供了几个基类来继承。这些基类已经实现了 widgets 所需的大部分功能，从而让开发者专注于创建自定义 UI。Theia 不依赖于特定的 UI 技术实现，用 React、Vue.js 或 Angular 都可实现。它们通过各自的基类来提供便捷的支持，如 React 模块。为避免纠结，使用 React 是目前实现自定义 widgets 的首选。下面是类的结构关系图。如果你想用 React 实现一个 widget，选择 <code class=\"language-text\">ReactWidget</code> 作为基类。如果你想实现一个树结构的 widget，请使用 <code class=\"language-text\">TreeWidget</code>。如果你不想使用 React，可以用 <code class=\"language-text\">BaseWidget</code>。查看 <code class=\"language-text\">BaseWidget</code> 的类结构关系，了解更多可用选项。</p>\n<ul>\n<li>BaseWidget\n    <ul>\n    <li><b>ReactWidget</b>\n        <ul>\n        <li>TreeWidget</li>\n        <li>…</li>\n        </ul>\n    </li>\n    </ul>\n</li>\n</ul>\n<p>在代码案例中，我们用 <code class=\"language-text\">ReactWidget</code> 作为基类。如下图所示，先用一些基本参数来初始化 widget：</p>\n<ul>\n<li><code class=\"language-text\">id</code>: 用于 widget 的唯一标识，比如用 WidgetManager 打开 widget 时用到。</li>\n<li><code class=\"language-text\">label</code>: 用于 widget 打开时的标签显示。</li>\n<li><code class=\"language-text\">caption</code>: 用于 widget 打开时，在标签上的悬停显示。</li>\n<li><code class=\"language-text\">closable</code>: 配置用户是否可以关闭 widget（通过标签中的 \"x\" 或右键菜单）。</li>\n<li><code class=\"language-text\">iconClass</code>: 用于 widget 打开时，在标签上的图标展示。</li>\n</ul>\n<p><strong>mywidget-widget.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyWidget</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ReactWidget</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token constant\">ID</span> <span class=\"token operator\">=</span> <span class=\"token string\">'my:widget'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">readonly</span> <span class=\"token constant\">LABEL</span> <span class=\"token operator\">=</span> <span class=\"token string\">'My Widget'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">postConstruct</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">async</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span> <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> MyWidget<span class=\"token punctuation\">.</span><span class=\"token constant\">ID</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">.</span>label <span class=\"token operator\">=</span> MyWidget<span class=\"token punctuation\">.</span><span class=\"token constant\">LABEL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">.</span>caption <span class=\"token operator\">=</span> MyWidget<span class=\"token punctuation\">.</span><span class=\"token constant\">LABEL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">.</span>closable <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">.</span>iconClass <span class=\"token operator\">=</span> <span class=\"token string\">'fa fa-window-maximize'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// example widget icon.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>基类能让我们只专注于 widget 的自定义 UI 部分，做到了真正意义上的最小成本。在例子中，我们只实现了渲染函数，该函数将创建 UI 界面（使用JSX/React）。这个例子的 UI 包含一个按钮，用于触发 <code class=\"language-text\">displayMessage</code> 函数。</p>\n<p><strong>mywidget-widget.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">protected</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>ReactNode <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> header <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">This is a sample widget which simply calls the messageService in order to display an info message to end users.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">'widget-container'</span><span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>AlertMessage type<span class=\"token operator\">=</span><span class=\"token string\">'INFO'</span> header<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>header<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n              <span class=\"token operator\">&lt;</span>button className<span class=\"token operator\">=</span><span class=\"token string\">'theia-button secondary'</span> title<span class=\"token operator\">=</span><span class=\"token string\">'Display Message'</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>_a <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">displayMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Display Message<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n           <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">inject</span></span><span class=\"token punctuation\">(</span>MessageService<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">readonly</span> messageService<span class=\"token operator\">!</span><span class=\"token operator\">:</span> MessageService<span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">protected</span> <span class=\"token function\">displayMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messageService<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Congratulations: My Widget Successfully Created!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>请注意，你也可以覆盖 <code class=\"language-text\">BaseWidget</code> 或 <code class=\"language-text\">ReactWidget</code> 来创建一个特定的 widget 生命周期钩子函数，如 <code class=\"language-text\">onUpdateRequest</code> 或 <code class=\"language-text\">onResize</code>。这些事件是由底层窗口管理框架 <a href=\"https://phosphorjs.github.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Phosphor.js</a> 定义的，关于 <code class=\"language-text\">Widget</code> 类，请看 <a href=\"http://phosphorjs.github.io/phosphor/api/widgets/classes/widget.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这篇文档</a>。</p>\n<p>除了编写 widget，你还需要用 Theia 工作台把它连接起来，这将在接下来的两节中介绍。</p>\n<h3 id=\"实现一个-widget-工厂\" style=\"position:relative;\"><a href=\"#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA-widget-%E5%B7%A5%E5%8E%82\" aria-label=\"实现一个 widget 工厂 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现一个 Widget 工厂</h3>\n<p>Theia中的 Widget 由中央服务 <code class=\"language-text\">WidgetManager</code> 来实例化和管理。这使得应用可以持续管控所有创建的 widget。例如，<code class=\"language-text\">WidgetManager</code>支持 <code class=\"language-text\">getOrCreate</code> 函数，如果已经创建，它将返回一个现有的 widget，如果没有，则创建一个新。</p>\n<p>为了使一个自定义的 widget 可以被 widget 管理器实例化，你需要注册 <code class=\"language-text\">WidgetFactory</code>。一个 widget 工厂由 ID 和创建 widget 的函数组成，widget 管理器将收集所有贡献的widget 工厂，并根据 ID 匹配各自的 widget。</p>\n<p>在我们的例子中（见下面的代码），首先将 <code class=\"language-text\">MyWidget</code> 绑定到自己身上，这样就可以用依赖注入在我们的工厂中将它实例化，如果所有的 widget 内部没用依赖注入的话，则无需要这样做。我们在上面的例子中使用依赖注入来检索消息服务和 @postConstruct 事件。其次，我们绑定一个 <code class=\"language-text\">WidgetFactory</code>，定义 widget 的 ID 和 <code class=\"language-text\">createWidget</code> 函数。这个函数允许你控制 widget 的创建，例如，如果需要的话，可以将特定的参数传递给自定义 widget。在我们的简单例子中，我们只是使用依赖性注入上下文来实例化我们的 widget。</p>\n<p><strong>mywidget-frontend-module.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>MyWidget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toSelf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>WidgetFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDynamicValue</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> MyWidget<span class=\"token punctuation\">.</span><span class=\"token constant\">ID</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">createWidget</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ctx<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>MyWidget<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>MyWidget<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">inSingletonScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>现在你可以通过 widget manager API 打开 widget。然而，大多数情况下，你需要在视图菜单中创建一个选项，并提供一个相应的命令。这可以通过使用 widget 扩展点来方便地完成，如下一节所述。</p>\n<h3 id=\"widget-扩展\" style=\"position:relative;\"><a href=\"#widget-%E6%89%A9%E5%B1%95\" aria-label=\"widget 扩展 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Widget 扩展</h3>\n<p>widget 扩展允许你将 widget 接入 Theia 工作台，更确切地说，是将它们添加到视图菜单和快捷命令中。Theia提供了一个方便的基类 <code class=\"language-text\">AbstractViewContribution</code> 来继承，它已经实现了最常见的功能集（见下面的示例代码）。只需要指定以下参数即可初始化：</p>\n<ul>\n<li><code class=\"language-text\">widgetID</code>: widget 的 ID，用于通过 widget 管理器打开它。</li>\n<li><code class=\"language-text\">widgetName</code>: 显示在视图菜单中的名称，通常与 widget 标签使用的名称相同。</li>\n<li><code class=\"language-text\">defaultWidgetOptions</code>: 影响 widget 打开时的位置选项，例如：在工作台面的左边区域。更多信息见<a href=\"https://eclipse-theia.github.io/theia/docs/next/interfaces/core.applicationshell-2.widgetoptions.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">the typedoc</a>。</li>\n<li><code class=\"language-text\">toggleCommandId</code>: 打开视图的命令，你可以使用超类提供的预实现函数：<code class=\"language-text\">openView</code>。\n除了指定的基本参数，你还需要注册打开视图的命令。基类实现了相应的命令贡献接口，所以你只需要实现 <code class=\"language-text\">registerCommands</code> 就可以了（见下文）。</li>\n</ul>\n<p><strong>mywidget-contribution.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> MyWidgetCommand<span class=\"token operator\">:</span> Command <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> <span class=\"token string\">'widget:command'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyWidgetContribution</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractViewContribution<span class=\"token operator\">&lt;</span>MyWidget<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n           widgetId<span class=\"token operator\">:</span> MyWidget<span class=\"token punctuation\">.</span><span class=\"token constant\">ID</span><span class=\"token punctuation\">,</span>\n           widgetName<span class=\"token operator\">:</span> MyWidget<span class=\"token punctuation\">.</span><span class=\"token constant\">LABEL</span><span class=\"token punctuation\">,</span>\n           defaultWidgetOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> area<span class=\"token operator\">:</span> <span class=\"token string\">'left'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n           toggleCommandId<span class=\"token operator\">:</span> MyWidgetCommand<span class=\"token punctuation\">.</span>id\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token function\">registerCommands</span><span class=\"token punctuation\">(</span>commands<span class=\"token operator\">:</span> CommandRegistry<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n       commands<span class=\"token punctuation\">.</span><span class=\"token function\">registerCommand</span><span class=\"token punctuation\">(</span>WidgetCommand<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token function-variable function\">execute</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">openView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> activate<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> reveal<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>有了上面的扩展，该视图将出现在 Theia 的标准\"视图\"菜单中，也可使用对应的\"打开视图\"命令将它打开。</p>","fields":{"slug":"widgets"}}},"pageContext":{"slug":"widgets"}},"staticQueryHashes":["2468095761"]}