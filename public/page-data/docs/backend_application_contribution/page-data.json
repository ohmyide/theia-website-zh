{"componentChunkName":"component---src-templates-doc-js","path":"/docs/backend_application_contribution","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Backend Application Contributions"},"html":"<h1 id=\"后台扩展点\" style=\"position:relative;\"><a href=\"#%E5%90%8E%E5%8F%B0%E6%89%A9%E5%B1%95%E7%82%B9\" aria-label=\"后台扩展点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>后台扩展点</h1>\n<p>后台扩展点允许 Theia 扩展与后台的生命周期相连接，它在后台启动后立即被实例化，因此是初始化后台服务的首选位置，这些服务在后台的整个生命周期都是需要的。</p>\n<p>要注册后台扩展点，扩展需要在后端模块中绑定接口 <code class=\"language-text\">BackendApplicationContribution</code> 的实现。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ContainerModule</span><span class=\"token punctuation\">(</span>bind <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>MemoryTracker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toSelf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">inSingletonScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>BackendApplicationContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toService</span><span class=\"token punctuation\">(</span>MemoryTracker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>接口 <code class=\"language-text\">BackendApplicationContribution</code> 提供可选的钩子函数，因此实现者可以自由的按需实现钩子，而非实现所有。\n对于后端服务的初始化，最常见的是 <code class=\"language-text\">initialize()</code> 钩子函数，Theia 后端初始化会立即调用。</p>\n<p>作为例子，我们实现一个后台服务，该服务将在 Theia 后台的整个生命周期内运行，以跟踪其内存使用情况。\n为了简单起见，只要内存的变化超过一定的阈值，它就会把内存打印到日志中。</p>\n<p>因此，一个名为 <code class=\"language-text\">MemoryTracker</code> 的 <code class=\"language-text\">BackendApplicationContribution</code> 被绑定在依赖注入上下文中，如上面的代码所示。\n<code class=\"language-text\">MemoryTracker</code> 的实现对钩子 <code class=\"language-text\">initialize()</code> 做出响应，每两秒执行 <code class=\"language-text\">logMemory()</code> 方法。\n该方法获取当前使用的内存，与之前的内存进行比较，一旦与之前的内存相差超过 0.1MB，就会向日志打印一条信息。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemoryTracker</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BackendApplicationContribution</span> <span class=\"token punctuation\">{</span>\n\n   <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">inject</span></span><span class=\"token punctuation\">(</span>ILogger<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">protected</span> <span class=\"token keyword\">readonly</span> logger<span class=\"token operator\">:</span> ILogger<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">protected</span> logTimer<span class=\"token operator\">:</span> NodeJS<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">protected</span> memoryUsed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> MaybePromise<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logTimer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">logMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">protected</span> <span class=\"token function\">logMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">const</span> currentMemoryUsed <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentRoundedMemoryUsage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">const</span> diff <span class=\"token operator\">=</span> currentMemoryUsed <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memoryUsed<span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>diff<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">const</span> timestamp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUTCString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span>\n               <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">[</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>timestamp<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">] PID </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>process<span class=\"token punctuation\">.</span>pid<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> uses </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>currentMemoryUsed<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> MB (</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>diff <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">'+'</span> <span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>diff<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span>\n           <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memoryUsed <span class=\"token operator\">=</span> currentMemoryUsed<span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token keyword\">protected</span> <span class=\"token function\">currentRoundedMemoryUsage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">memoryUsage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>heapUsed <span class=\"token operator\">/</span> <span class=\"token number\">1024</span> <span class=\"token operator\">/</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token function\">onStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logTimer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logTimer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>一旦后端应用的贡献被注册，且后端启动，就开始打印输出，类似于以下内容：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">root INFO Theia app listening on http://localhost:3000.\nroot INFO Configuration directory URI: 'file:///home/foobar/.theia'\nroot INFO [Fri, 20 Aug 2021 12:20:43 GMT] PID 46590 uses 18.14 MB (+18.14)\nroot INFO [Fri, 20 Aug 2021 12:20:47 GMT] PID 46590 uses 18.94 MB (+0.80)\nroot INFO [Fri, 20 Aug 2021 12:20:51 GMT] PID 46590 uses 15.25 MB (-3.69)\nroot INFO [Fri, 20 Aug 2021 12:21:07 GMT] PID 46590 uses 15.36 MB (+0.11)\nroot INFO [Fri, 20 Aug 2021 12:21:21 GMT] PID 46590 uses 15.47 MB (+0.11)\nroot INFO [Fri, 20 Aug 2021 12:21:41 GMT] PID 46590 uses 15.6 MB (+0.13)\nroot INFO [Fri, 20 Aug 2021 12:21:59 GMT] PID 46590 uses 15.71 MB (+0.11)</code></pre></div>\n<p>通常这样的后台扩展点也提供了可以被其他后端服务调用的方法，例如：启动需要在应用启动后立即达到可用状态的外部进程，如：数据库连接、REST服务等。</p>\n<p>除了在后端启动时初始化后端服务外，后台扩展点还可以配置和扩展 Theia 后端使用的 HTTP 服务器。\n因此 <code class=\"language-text\">BackendApplicationContribution</code> 接口提供了三个方法 <code class=\"language-text\">configure(app: express.Application)</code>、<code class=\"language-text\">onStart(app: express.Application)</code> 和 <code class=\"language-text\">onStop(app: express.Application)</code>。\n因此，HTTP 服务器可以通过自定义设置进行配置，甚至可以通过额外的终端进行扩展，这些终端需要对相应的 Theia 应用可用。</p>\n<p>下面给出了一个配置名为 <code class=\"language-text\">/myendpoint</code> 的终端例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> injectable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@theia/core/shared/inversify'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> json <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'body-parser'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Application<span class=\"token punctuation\">,</span> Router <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@theia/core/shared/express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BackendApplicationContribution <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@theia/core/lib/node/backend-application'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCustomEndpoint</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">BackendApplicationContribution</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span>app<span class=\"token operator\">:</span> Application<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n       app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/myendpoint'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n           …\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>关于如何配置 HTTP 端点和处理事件请求的更多信息，请参阅 <a href=\"https://expressjs.com/en/4x/api.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Express API</a>.</p>","fields":{"slug":"backend_application_contribution"}}},"pageContext":{"slug":"backend_application_contribution"}},"staticQueryHashes":["2468095761"]}