{"componentChunkName":"component---src-templates-doc-js","path":"/docs/json_rpc","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Communication via JSON-RPC"},"html":"<h1 id=\"用-json-rpc-通信\" style=\"position:relative;\"><a href=\"#%E7%94%A8-json-rpc-%E9%80%9A%E4%BF%A1\" aria-label=\"用 json rpc 通信 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>用 JSON-RPC 通信</h1>\n<p>本节我将解释如何创建后端服务，并通过 JSON-RPC 连接到它。</p>\n<p>我将使用调试日志系统作为例子。</p>\n<h2 id=\"概述\" style=\"position:relative;\"><a href=\"#%E6%A6%82%E8%BF%B0\" aria-label=\"概述 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>概述</h2>\n<p>这由 express 框架创建的服务，并用 websocket 连接到它。</p>\n<h2 id=\"服务注册\" style=\"position:relative;\"><a href=\"#%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C\" aria-label=\"服务注册 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>服务注册</h2>\n<p>要做的第一件事就是开放你的服务，以便前端可以连接到它。</p>\n<p>你需要创建与此下述后端服务类似的文件 (logger-server-module.ts)：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ContainerModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'inversify'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ConnectionHandler<span class=\"token punctuation\">,</span> JsonRpcConnectionHandler <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../messaging/common\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ILoggerServer<span class=\"token punctuation\">,</span> ILoggerClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../../application/common/logger-protocol'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> loggerServerModule <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ContainerModule</span><span class=\"token punctuation\">(</span>bind <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>ConnectionHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDynamicValue</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">=></span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonRpcConnectionHandler<span class=\"token operator\">&lt;</span>ILoggerClient<span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/services/logger\"</span><span class=\"token punctuation\">,</span> client <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> loggerServer <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ILoggerServer<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>ILoggerServer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            loggerServer<span class=\"token punctuation\">.</span><span class=\"token function\">setClient</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> loggerServer<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">inSingletonScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>来详细了解一下：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ConnectionHandler<span class=\"token punctuation\">,</span> JsonRpcConnectionHandler <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../../messaging/common\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里导入了 <code class=\"language-text\">JsonRpcConnectionHandler</code>，这个工厂使你能够创建连接处理程序，onConnection 用 JSON-RPC 在后端调用的对象创建代理，并将本地对象公开给 JSON-RPC。</p>\n<p>跟着我们的步骤，将看到这是如何一步步完成。</p>\n<p><code class=\"language-text\">ConnectionHandler</code> 是一个简单的接口，它指定了连接的路径以及创建连接的情况。</p>\n<p>像这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> MessageConnection <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vscode-jsonrpc\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> ConnectionHandler <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ConnectionHandler'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ConnectionHandler</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">readonly</span> path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">onConnection</span><span class=\"token punctuation\">(</span>connection<span class=\"token operator\">:</span> MessageConnection<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ILoggerServer<span class=\"token punctuation\">,</span> ILoggerClient <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../../application/common/logger-protocol'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>logger-protocol.ts 文件包含服务器和客户端需要实现的接口。</p>\n<p>这里的服务器指的是将通过 JSON-RPC 调用的后端对象，而客户端是一个可以接收来自后台通知的对象。</p>\n<p>我将在后面详细介绍。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">    <span class=\"token generic-function\"><span class=\"token function\">bind</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ConnectionHandler<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>ConnectionHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDynamicValue</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></code></pre></div>\n<p>这里发生了一些神奇的事情，乍一看，我们只是说这里实现的ConnectionHandler。</p>\n<p>这里的神奇之处在于，在 messaging-module.ts 中， ConnectionHandler 类型被绑定到 ContributionProvider 。</p>\n<p>所以当 MessagingContribution 启动时（onStart被调用），它会为所有绑定的 ConnectionHandler 创建websocket连接。</p>\n<p>像这样（来自messaging-module.ts）：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span> <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">inject</span></span><span class=\"token punctuation\">(</span>ContributionProvider<span class=\"token punctuation\">)</span> <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">named</span></span><span class=\"token punctuation\">(</span>ConnectionHandler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">protected</span> <span class=\"token keyword\">readonly</span> handlers<span class=\"token operator\">:</span> ContributionProvider<span class=\"token operator\">&lt;</span>ConnectionHandler<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span>server<span class=\"token operator\">:</span> http<span class=\"token punctuation\">.</span>Server<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> handler <span class=\"token keyword\">of</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handlers<span class=\"token punctuation\">.</span><span class=\"token function\">getContributions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">createServerWebSocketConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                    server<span class=\"token punctuation\">,</span>\n                    path\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> connection <span class=\"token operator\">=></span> handler<span class=\"token punctuation\">.</span><span class=\"token function\">onConnection</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>想进一步了解 ContributionProvider，<a href=\"Services_and_Contributions#contribution-providers\">请看这里</a>.</p>\n<p>因此现在：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonRpcConnectionHandler<span class=\"token operator\">&lt;</span>ILoggerClient<span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/services/logger\"</span><span class=\"token punctuation\">,</span> client <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></code></pre></div>\n<p>我们看一下这个类的实现，这里做了这么几件事：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JsonRpcConnectionHandler<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> object<span class=\"token operator\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ConnectionHandler</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">readonly</span> path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">readonly</span> <span class=\"token function-variable function\">targetFactory</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>proxy<span class=\"token operator\">:</span> JsonRpcProxy<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">onConnection</span><span class=\"token punctuation\">(</span>connection<span class=\"token operator\">:</span> MessageConnection<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonRpcProxyFactory<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">createProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">targetFactory</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们看到，websocket 连接是通过 ConnectionHandler 类的扩展，在 \"logger\" 路径上创建的，路径属性被设置为 \"logger\"。</p>\n<p>现在看看 onConnection 是什么：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">    <span class=\"token function\">onConnection</span><span class=\"token punctuation\">(</span>connection<span class=\"token operator\">:</span> MessageConnection<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonRpcProxyFactory<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">createProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">targetFactory</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        factory<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我们一行行的看下去：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">    <span class=\"token keyword\">const</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonRpcProxyFactory<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里在 \"logger\" 路径上创建 JsonRpcProxy：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">    <span class=\"token keyword\">const</span> proxy <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">createProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里我们从工厂创建代理对象，它被用来调用使用 ILoggerClient 接口连接 JSON-RPC 的另一端。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">    factory<span class=\"token punctuation\">.</span>target <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">targetFactory</span><span class=\"token punctuation\">(</span>proxy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这将调用我们在参数中传递的函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">        client <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> loggerServer <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ILoggerServer<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>ILoggerServer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            loggerServer<span class=\"token punctuation\">.</span><span class=\"token function\">setClient</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> loggerServer<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span></code></pre></div>\n<p>这设置了与 loggerServer 对应的客户端，它被用于向前台发送关于日志级别变化的通知，并将 loggerServer 作为对象返回，该对象将通过 JSON-RPC 公开。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"> factory<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这将工厂连接起来。</p>\n<p>带有 <code class=\"language-text\">services/*</code> 路径的终端由 webpack dev server 提供，见 <code class=\"language-text\">webpack.config.js</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token string-property property\">'/services/*'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">'ws://localhost:3000'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">ws</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h2 id=\"connecting-to-a-service\" style=\"position:relative;\"><a href=\"#connecting-to-a-service\" aria-label=\"connecting to a service permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Connecting to a service</h2>\n<p>So now that we have a backend service let's see how to connect to it from\nthe frontend.</p>\n<p>To do that you will need something like this:</p>\n<p>(From logger-frontend-module.ts)</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ContainerModule<span class=\"token punctuation\">,</span> Container <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'inversify'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> WebSocketConnectionProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../../messaging/browser/connection'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ILogger<span class=\"token punctuation\">,</span> LoggerFactory<span class=\"token punctuation\">,</span> LoggerOptions<span class=\"token punctuation\">,</span> Logger <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../common/logger'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ILoggerServer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../common/logger-protocol'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> LoggerWatcher <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../common/logger-watcher'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> loggerFrontendModule <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ContainerModule</span><span class=\"token punctuation\">(</span>bind <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>ILogger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>Logger<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">inSingletonScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>LoggerWatcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toSelf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">inSingletonScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>ILoggerServer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDynamicValue</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> loggerWatcher <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>LoggerWatcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> connection <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>WebSocketConnectionProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> connection<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">createProxy</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ILoggerServer<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/services/logger\"</span><span class=\"token punctuation\">,</span> loggerWatcher<span class=\"token punctuation\">.</span><span class=\"token function\">getLoggerClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">inSingletonScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The important bit here are those lines:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">    <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>ILoggerServer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toDynamicValue</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> loggerWatcher <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>LoggerWatcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> connection <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>WebSocketConnectionProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> connection<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">createProxy</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ILoggerServer<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/services/logger\"</span><span class=\"token punctuation\">,</span> loggerWatcher<span class=\"token punctuation\">.</span><span class=\"token function\">getLoggerClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">inSingletonScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Let's go line by line:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">        <span class=\"token keyword\">const</span> loggerWatcher <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>LoggerWatcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here we're creating a watcher, this is used to get notified about events\nfrom the backend by using the loggerWatcher client\n(loggerWatcher.getLoggerClient())</p>\n<p>See more information about how events work in theia <a href=\"/docs/Events#events\">here</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">        <span class=\"token keyword\">const</span> connection <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span>container<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>WebSocketConnectionProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here we're getting the websocket connection, this will be used to create a proxy from.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">        <span class=\"token keyword\">return</span> connection<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">createProxy</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ILoggerServer<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/services/logger\"</span><span class=\"token punctuation\">,</span> loggerWatcher<span class=\"token punctuation\">.</span><span class=\"token function\">getLoggerClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>作为第二个参数，我们传递一个本地对象来处理来自远端的 JSON-RPC 消息。</p>\n<p>有时本地对象依赖代理，并且不能在代理实例化之前实例化，在这种情况下，代理接口应该实现 <code class=\"language-text\">JsonRpcServer</code>，本地对象应该作为客户端。</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">JsonRpcServer<span class=\"token operator\">&lt;</span>Client<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Disposable <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setClient</span><span class=\"token punctuation\">(</span>client<span class=\"token operator\">:</span> Client <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ILoggerServer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JsonRpcServery<span class=\"token operator\">&lt;</span>ILoggerClient<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> serverProxy <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">createProxy</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ILoggerServer<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/services/logger\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> loggerWatcher<span class=\"token punctuation\">.</span><span class=\"token function\">getLoggerClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nserverProxy<span class=\"token punctuation\">.</span><span class=\"token function\">setClient</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So here at the last line we're binding the ILoggerServer interface to a\nJsonRpc proxy.</p>\n<p>Note that his under the hood calls:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"> <span class=\"token generic-function\"><span class=\"token function\">createProxy</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> object<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> target<span class=\"token operator\">?</span><span class=\"token operator\">:</span> object<span class=\"token punctuation\">,</span> options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> WebSocketOptions<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JsonRpcProxyFactory<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>factory<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">createProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>So it's very similar to the backend example.</p>\n<p>Maybe you've noticed too but as far as the connection is concerned the frontend\nis the server and the backend is the client. But that doesn't really\nmatter in our logic.</p>\n<p>So again there's multiple things going on here what this does is that:</p>\n<ul>\n<li>it creates a JsonRpc Proxy on path \"logger\".</li>\n<li>it exposes the loggerWatcher.getLoggerClient() object.</li>\n<li>it returns a proxy of type ILoggerServer.</li>\n</ul>\n<p>So now instances of ILoggerServer are proxied over JSON-RPC to the\nbackend's LoggerServer object.</p>\n<h2 id=\"加载案例的前后端模块\" style=\"position:relative;\"><a href=\"#%E5%8A%A0%E8%BD%BD%E6%A1%88%E4%BE%8B%E7%9A%84%E5%89%8D%E5%90%8E%E7%AB%AF%E6%A8%A1%E5%9D%97\" aria-label=\"加载案例的前后端模块 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>加载案例的前后端模块</h2>\n<p>现在我们有了这些模块，需要把它们连接到案例中。</p>\n<p>我们将使用浏览器的场景来做演示，注意，这和 Electron 场景下的代码是一样的。</p>\n<h3 id=\"后端\" style=\"position:relative;\"><a href=\"#%E5%90%8E%E7%AB%AF\" aria-label=\"后端 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>后端</h3>\n<p>在 examples/browser/src/backend/main.ts 中需要：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> loggerServerModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'theia-core/lib/application/node/logger-server-module'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>并且加载到 main container 之中：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">container<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>loggerServerModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"前端\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E7%AB%AF\" aria-label=\"前端 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前端</h3>\n<p>在 examples/browser/src/frontend/main.ts 中需要：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> loggerFrontendModule <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'theia-core/lib/application/browser/logger-frontend-module'</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">container<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>frontendLanguagesModule<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"完整案例\" style=\"position:relative;\"><a href=\"#%E5%AE%8C%E6%95%B4%E6%A1%88%E4%BE%8B\" aria-label=\"完整案例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>完整案例</h2>\n<p>如果想看本文档中提到的完整实现，<a href=\"https://github.com/eclipse-theia/theia/commit/99d191f19bd2a3e93098470ca1bb7b320ab344a1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">请看这个 commit</a>。</p>","fields":{"slug":"json_rpc"}}},"pageContext":{"slug":"json_rpc"}},"staticQueryHashes":["2468095761"]}