{"componentChunkName":"component---src-templates-doc-js","path":"/docs/authoring_extensions","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Authoring an Extension"},"html":"<h1 id=\"开发-theia-扩展\" style=\"position:relative;\"><a href=\"#%E5%BC%80%E5%8F%91-theia-%E6%89%A9%E5%B1%95\" aria-label=\"开发 theia 扩展 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>开发 Theia 扩展</h1>\n<p>作为演示，我们将创建一个 Say hello 的菜单项，用来展示提示信息 “Hello world！”，本文将讲解所有步骤。</p>\n<h2 id=\"theia-的架构\" style=\"position:relative;\"><a href=\"#theia-%E7%9A%84%E6%9E%B6%E6%9E%84\" aria-label=\"theia 的架构 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Theia 的架构</h2>\n<p>Theia 的应用由扩展组成，扩展为一个特定功能，可以提供 widgets、命令、处理程序等。Theia 本身提供了许多扩展，例如 用于编辑器、终端、项目视图等。每个扩展都存放在自己的 npm 包中。</p>\n<p>Theia 定义了大量可扩展的接口，允许扩展将它们的行为添加到应用的各个方面。 只需搜索名称为 <code class=\"language-text\">*Contribution</code> 的接口即可了解。 扩展实现属于它想要提供功能的接口。 在这个例子中，我们将实现一个 “CommandContribution” 和一个 “MenuContribution”。 扩展与 Theia 应用交互的其他方式是通过各种服务（services） 或管理器（managers）。</p>\n<p>在 Theia 中，一切都由 <a href=\"/docs/Services_and_Contributions#dependency-injection-di\">依赖注入</a> 连接起来。 一个扩展定义了一个或多个依赖注入模块。这是它将其能力绑定到对应扩展接口的地方。 这些模块列在扩展包的 <code class=\"language-text\">package.json</code> 中。 扩展可以应用在前端，例如：提供 UI 的扩展，也可以用在后端，例如：提供一个语言服务的扩展。当应用启动时，这些模块的联合分别在前端和后端配置一个全局依赖注入容器。 然后，运行时将通过多重注入收集特定类型的扩展。</p>\n<h2 id=\"前置条件\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E7%BD%AE%E6%9D%A1%E4%BB%B6\" aria-label=\"前置条件 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前置条件</h2>\n<p>关于前置条件信息可从 <a href=\"https://github.com/eclipse-theia/theia/blob/master/doc/Developing.md#prerequisites\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Theia 存储库</a> 中查看。</p>\n<h2 id=\"项目结构\" style=\"position:relative;\"><a href=\"#%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84\" aria-label=\"项目结构 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>项目结构</h2>\n<p>我们将创建一个名为 <code class=\"language-text\">theia-hello-world-extension</code> 的 monorepo（包含多个 npm 包的存储库），其中包含三个包：<code class=\"language-text\">hello-world-extension</code>、<code class=\"language-text\">browser-app</code> 和 <code class=\"language-text\">electron-app</code>。第一个包含我们的扩展，后两个分别应用在浏览器和 Electron 模式下运行扩展。我们将使用 <code class=\"language-text\">yarn</code> 而不是 <code class=\"language-text\">npm</code>，因为它允许将这样的 monorepos 构建到工作区中。在我们的例子中，每个工作区都包含自己的 <code class=\"language-text\">npm</code> 包。这些包的公共依赖项被 <code class=\"language-text\">yarn</code> “提取”到它们的公共根目录。我们还将使用 lerna 跨工作区运行脚本。</p>\n<p>为了简化此类仓库的配置，我们创建了 <a href=\"https://www.npmjs.com/package/generator-theia-extension\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">代码生成器</a> 来为项目搭建脚手架。它将生成 <code class=\"language-text\">hello-world</code> 示例。运行命令为：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g yo generator-theia-extension\n<span class=\"token function\">mkdir</span> theia-hello-world-extension\n<span class=\"token builtin class-name\">cd</span> theia-hello-world-extension\nyo theia-extension <span class=\"token comment\"># select the 'Hello World' option and complete the prompts</span></code></pre></div>\n<p>现在来看看生成的代码，根 <code class=\"language-text\">package.json</code> 定义了工作空间、对 <code class=\"language-text\">lerna</code> 的依赖，以及一些用于浏览器或 electron 构建本地包的脚本。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"private\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"prepare\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lerna run prepare\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"rebuild:browser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"theia rebuild:browser\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"rebuild:electron\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"theia rebuild:electron\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"lerna\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2.4.0\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"workspaces\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"hello-world-extension\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"browser-app\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"electron-app\"</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>用一个 <code class=\"language-text\">lerna.json</code> 文件来配置 <code class=\"language-text\">lerna</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"lerna\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2.4.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"useWorkspaces\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"npmClient\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"run\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"stream\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"实现扩展\" style=\"position:relative;\"><a href=\"#%E5%AE%9E%E7%8E%B0%E6%89%A9%E5%B1%95\" aria-label=\"实现扩展 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现扩展</h2>\n<p>接下来让我们看看 <code class=\"language-text\">hello-world-extension</code> 文件夹中为扩展生成的代码。 先从 <code class=\"language-text\">package.json</code> 开始。，它指定了包的元数据、它对（前沿）Theia 核心包的依赖项、一些脚本和开发依赖以及 theia 扩展。</p>\n<p>关键字 <code class=\"language-text\">theia-extension</code> 很重要：它允许 Theia 应用程序从 <code class=\"language-text\">npm</code> 识别和安装 Theia 扩展。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hello-world-extension\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"keywords\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"theia-extension\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"files\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"lib\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"src\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@theia/core\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"rimraf\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"prepare\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn run clean &amp;&amp; yarn run build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"clean\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"rimraf lib\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"watch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc -w\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"theiaExtensions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"frontend\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lib/browser/hello-world-frontend-module\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后一个属性 <code class=\"language-text\">theiaExtensions</code> 是我们列出导出依赖注入模块的 JavaScript 模块的地方，这些依赖注入模块定义了扩展的绑定。 在例子中，我们只提供了一个前端功能（一个命令和一个菜单项）。 同样，你还可以定义对后端的扩展，例如：语言服务的语言扩展。</p>\n<p>在前端模块中，我们导出一个默认对象，即 <a href=\"https://github.com/inversify/InversifyJS/blob/master/wiki/container_modules.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">InversifyJS <code class=\"language-text\">ContainerModule</code></a>，其中包含命令和菜单的贡献点绑定。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ContainerModule</span><span class=\"token punctuation\">(</span>bind <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// add your contribution bindings here</span>\n    <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>CommandContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>HelloWorldCommandContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>MenuContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>HelloWorldMenuContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>命令是定义 ID 和标签的普通数据结构，命令的行为是通过在命令贡献点中，将处理程序注册到对应的 ID 上实现的。 生成器已经添加了一个命令和一个显示“Hello World！”的处理程序。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> HelloWorldCommand <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'HelloWorld.command'</span><span class=\"token punctuation\">,</span>\n    label<span class=\"token operator\">:</span> <span class=\"token string\">\"Shows a message\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorldCommandContribution</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CommandContribution</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n        <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">inject</span></span><span class=\"token punctuation\">(</span>MessageService<span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> messageService<span class=\"token operator\">:</span> MessageService<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">registerCommands</span><span class=\"token punctuation\">(</span>registry<span class=\"token operator\">:</span> CommandRegistry<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">registerCommand</span><span class=\"token punctuation\">(</span>HelloWorldCommand<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function-variable function\">execute</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messageService<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>请注意我们是如何在构造函数中使用 <code class=\"language-text\">@inject</code> 来获取 <code class=\"language-text\">MessageService</code> 作为属性的，以及我们后续在处理程序的实现中如何使用它。这些就是依赖注入的优雅之处：作为需求方，我们既不关心这些依赖来自哪里，也不关心它们的生命周期是什么。</p>\n<p>为了让 UI 可以访问它，我们实现了一个“MenuContribution”，将一个菜单添加到菜单栏中编辑菜单的搜索/替换部分。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token operator\">...</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorldMenuContribution</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MenuContribution</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">registerMenus</span><span class=\"token punctuation\">(</span>menus<span class=\"token operator\">:</span> MenuModelRegistry<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        menus<span class=\"token punctuation\">.</span><span class=\"token function\">registerMenuAction</span><span class=\"token punctuation\">(</span>CommonMenus<span class=\"token punctuation\">.</span><span class=\"token constant\">EDIT_FIND</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n                commandId<span class=\"token operator\">:</span> HelloWorldCommand<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n                label<span class=\"token operator\">:</span> <span class=\"token string\">'Say Hello'</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"浏览器中执行扩展\" style=\"position:relative;\"><a href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E6%89%A7%E8%A1%8C%E6%89%A9%E5%B1%95\" aria-label=\"浏览器中执行扩展 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>浏览器中执行扩展</h2>\n<p>现在我们想看到扩展的运行。 为此，生成器在“browser-app”文件夹中创建了一个“package.json”。 它定义了一个带有几个静态扩展的 Theia 浏览器应用，包括我们的 <code class=\"language-text\">hello-world-extension</code>。 此目录中的其他文件均由 <code class=\"language-text\">yarn</code> 在构建期间调用 <code class=\"language-text\">theia-cli</code> 工具自动生成，具体见脚本中定义 cli 的命令。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"browser-app\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.1.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@theia/core\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@theia/filesystem\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@theia/workspace\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@theia/preferences\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@theia/navigator\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@theia/process\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@theia/terminal\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@theia/editor\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@theia/languages\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@theia/markers\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@theia/monaco\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"@theia/messages\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"hello-world-extension\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.1.0\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"@theia/cli\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"latest\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"prepare\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"theia build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"theia start\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"watch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"theia build --watch\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"theia\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"browser\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>现在我们将所有部分组合在一起来构建和运行应用，要运行浏览器应用程序，请执行：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> browser-app\n<span class=\"token function\">yarn</span> start <span class=\"token operator\">&lt;</span>path to workspace<span class=\"token operator\">></span></code></pre></div>\n<p>并在浏览器中访问 <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:3000</a>. 然后从菜单栏中选择 编辑 > Say Hello：一条 \"Hello World!\" 弹窗提示即可出现。</p>\n<h2 id=\"在-electron-中执行扩展\" style=\"position:relative;\"><a href=\"#%E5%9C%A8-electron-%E4%B8%AD%E6%89%A7%E8%A1%8C%E6%89%A9%E5%B1%95\" aria-label=\"在 electron 中执行扩展 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在 Electron 中执行扩展</h2>\n<p>Electron 应用的 <code class=\"language-text\">package.json</code> 除了 name 和 target 属性，其余看起来几乎相同。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"electron-app\"</span><span class=\"token punctuation\">,</span>\n  ...\n  <span class=\"token property\">\"theia\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"electron\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在运行 Electron 应用之前，你必须先构建一些原生模块：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> rebuild:electron\n<span class=\"token builtin class-name\">cd</span> electron-app\n<span class=\"token function\">yarn</span> start <span class=\"token operator\">&lt;</span>path to workspace<span class=\"token operator\">></span></code></pre></div>\n<h2 id=\"发布扩展\" style=\"position:relative;\"><a href=\"#%E5%8F%91%E5%B8%83%E6%89%A9%E5%B1%95\" aria-label=\"发布扩展 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>发布扩展</h2>\n<p>如果你想让扩展公开可用，我们建议将其发布到 npm。 可通过从扩展包的目录中执行 <code class=\"language-text\">yarn publish</code> 实现。 当然，前提是你要有一个有效的 npm 帐户。</p>","fields":{"slug":"authoring_extensions"}}},"pageContext":{"slug":"authoring_extensions"}},"staticQueryHashes":["2468095761"]}