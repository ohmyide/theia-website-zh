{"componentChunkName":"component---src-templates-doc-js","path":"/docs/architecture","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Architecture Overview"},"html":"<h1 id=\"架构概述\" style=\"position:relative;\"><a href=\"#%E6%9E%B6%E6%9E%84%E6%A6%82%E8%BF%B0\" aria-label=\"架构概述 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>架构概述</h1>\n<p>本章将介绍 Theia 的整体架构。</p>\n<p>Theia 设计运行在本地桌面应用以及浏览器和远程服务器的环境中。为了一套代码支持这两种情况，Theia 运行在两个独立的进程中。这两个进程分别称为前端和后端，它们通过 WebSocket 传输 JSON-RPC 或用 HTTP 上的 REST API 进行通信。 对于 Electron 桌面应用，后端和前端都运行在本地，而浏览器和远程服务器环境中，后端将在远程主机上运行。</p>\n<p>前端和后端进程都有各自的依赖注入 (DI) 容器（见下文），用扩展的方式为这些容器增添能力。</p>\n<h2 id=\"前端\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E7%AB%AF\" aria-label=\"前端 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前端</h2>\n<p>前端进程指客户端，用于呈现 UI。 在浏览器中，它只用于渲染，而在 Electron 桌面上，它运行在 Electron Window 之中，它实质上是一个拥有 Electron 和 Node.js API 能力的浏览器。</p>\n<p>因此，任何前端代码都可以将浏览器视为平台，而不是 Node.js。</p>\n<p>前端进程的启动会首先加载完所有依赖注入（DI）模块，获得所有扩展，然后创建 <code class=\"language-text\">FrontendApplication</code> 实例，并在其上调用<code class=\"language-text\">start()</code>。</p>\n<h2 id=\"后端\" style=\"position:relative;\"><a href=\"#%E5%90%8E%E7%AB%AF\" aria-label=\"后端 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>后端</h2>\n<p>后端进程运行在 Node.js 上， 我们使用 express 框架作为 HTTP 服务器。 在它之上，不得使用任何有关浏览器（DOM API）的代码。</p>\n<p>后端的启动同样也会首先加载所有依赖注入（DI）的模块，获得扩展，然后创建 <code class=\"language-text\">BackendApplication</code> 实例，并在其上调用<code class=\"language-text\">start(portNumber)</code>。</p>\n<p>默认情况下，后端的 express 服务器也用于返回前端静态代码。</p>\n<h2 id=\"前后台分离\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E5%90%8E%E5%8F%B0%E5%88%86%E7%A6%BB\" aria-label=\"前后台分离 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前后台分离</h2>\n<p>在扩展的顶层文件夹中，我们用专门的文件夹进行前后台分离：</p>\n<ul>\n<li><code class=\"language-text\">common</code> 文件夹存放不依赖于任何前后进程的通用代码。</li>\n<li><code class=\"language-text\">browser</code> 文件夹存放以浏览器作为运行平台的代码（DOM API）。</li>\n<li><code class=\"language-text\">electron-browser</code> 文件夹存放需要 DOM API 的前端代码以及 Electron 渲染进程的特定 API 代码。</li>\n<li><code class=\"language-text\">node</code> 文件夹存放需要 Node.js 的（后端）代码。</li>\n<li><code class=\"language-text\">node-electron</code> 文件夹存放特定于 Electron 的（后端）代码。</li>\n</ul>\n<h2 id=\"参见\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%A7%81\" aria-label=\"参见 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参见</h2>\n<p>有关 Theia 架构的高级概述，请参阅此文档：\n<a href=\"https://docs.google.com/document/d/1aodR1LJEF_zu7xBis2MjpHRyv7JKJzW7EWI9XRYCt48\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Multi-Language IDE Implemented in JS - Scope and Architecture</a></p>","fields":{"slug":"architecture"}}},"pageContext":{"slug":"architecture"}},"staticQueryHashes":["2468095761"]}