{"componentChunkName":"component---src-templates-doc-js","path":"/docs/i18n","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Internationalization"},"html":"<h1 id=\"国际化\" style=\"position:relative;\"><a href=\"#%E5%9B%BD%E9%99%85%E5%8C%96\" aria-label=\"国际化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>国际化</h1>\n<p>Theia 可以通过安装 <a href=\"https://code.visualstudio.com/docs/getstarted/locales\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Visual Studio Code language packs</a> 语言包来实现本地化。使用 <code class=\"language-text\">Configure Display Language</code> 命令，Theia 的用户可以改变当前使用的语言环境。该框架提供了额外功能，使扩展开发者能够对自己的扩展进行本地化。</p>\n<h2 id=\"本地化你的扩展\" style=\"position:relative;\"><a href=\"#%E6%9C%AC%E5%9C%B0%E5%8C%96%E4%BD%A0%E7%9A%84%E6%89%A9%E5%B1%95\" aria-label=\"本地化你的扩展 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>本地化你的扩展</h2>\n<p>假设你有一个简单的字符，想在应用的前端显示，比如：一个显示 “goodbye” 的自定义 widget：</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Bye</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>为了用不同的语言显示这个信息，你可以使用从 <code class=\"language-text\">@theia/core</code> 包中导入的 <code class=\"language-text\">nls.localize</code> 函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>nls<span class=\"token punctuation\">.</span><span class=\"token function\">localize</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bye'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bye'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>第一个参数是标识翻译的 key，第二个参数是默认值，如果用户没有改变他们的 locale，就会使用这个默认值。当在前端使用模板时，<code class=\"language-text\">nls.localize</code> 函数允许使用额外的 <code class=\"language-text\">args</code> 参数来格式化字符串。当 <code class=\"language-text\">localize</code> 函数识别出格式为 <code class=\"language-text\">{n}</code> 的占位符，其中 <em>n</em> 代表任何数字，它将在适当的位置用输入参数替换占位符，例如，<code class=\"language-text\">{0}</code> 将被第一个附加参数替换，<code class=\"language-text\">{1}</code> 被第二个替换，以此类推。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">nls<span class=\"token punctuation\">.</span><span class=\"token function\">localize</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bye-format'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bye {0} and {1}!'</span><span class=\"token punctuation\">,</span> first<span class=\"token punctuation\">,</span> second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">Command</code> 命名空间提供了 toLocalizedCommand 函数来帮你对扩展进行本地化。 该函数接受一个 <em>Command</em> 和本地化的 key 作为参数。第一个附加 key 用于本地化标签，第二个用于分类。如果没有提供，命令的 <em>id</em> 将用作标签的本地化 key。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">command <span class=\"token operator\">=</span> Command<span class=\"token punctuation\">.</span><span class=\"token function\">toLocalizedCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token string\">'hello-command'</span><span class=\"token punctuation\">,</span>\n    label<span class=\"token operator\">:</span> <span class=\"token string\">'Hello'</span>\n    category<span class=\"token operator\">:</span> <span class=\"token string\">'Greetings'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'greetings'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在用 <code class=\"language-text\">nls.localize</code> 调用替换了所有向用户展示的字符后，你可以用 <code class=\"language-text\">@theia/cli</code> 包中的 <code class=\"language-text\">theia nls-extract</code> 命令来提取所有使用的本地化信息到一个单一的 JSON 文件中。对于上面的两个例子，它将产生以下的JSON输出。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"bye\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bye\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"hello\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"greetings\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Greetings\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>你也可以用正斜杠将这些键分组，如：<code class=\"language-text\">nls.localize('group/bye', 'Bye')</code> 这样的调用会应用到 JSON 文件。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"group\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"bye\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Bye\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这些文件被翻译成你的目标语言后，你可以继续使用自定义的 \"LocalizationContribution\" 为你的字符注册新的本地化信息。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// creating your own localization contribution for German, Italian and simplified Chinese</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomLocalizationContribution</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LocalizationContribution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">registerLocalizations</span><span class=\"token punctuation\">(</span>registry<span class=\"token operator\">:</span> LocalizationRegistry<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Theia uses language codes, e.g. \"de\" for German</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">registerLocalizationFromRequire</span><span class=\"token punctuation\">(</span><span class=\"token string\">'de'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../data/i18n/nls.de.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">registerLocalizationFromRequire</span><span class=\"token punctuation\">(</span><span class=\"token string\">'it'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../data/i18n/nls.it.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        registry<span class=\"token punctuation\">.</span><span class=\"token function\">registerLocalizationFromRequire</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zh-cn'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../data/i18n/nls.zh-cn.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后，<code class=\"language-text\">LocalizationContribution</code> 必须绑定在后台注入模块中。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>CustomLocalizationContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toSelf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">inSingletonScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>LocalizationContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toService</span><span class=\"token punctuation\">(</span>CustomLocalizationContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>注意，<code class=\"language-text\">Configure Display Language</code> 命令只在语言包安装完毕后才会显示对应的语言。这保证了在用户改变语言后，Theia 框架整体都被翻译。</p>\n<h2 id=\"改变默认语言\" style=\"position:relative;\"><a href=\"#%E6%94%B9%E5%8F%98%E9%BB%98%E8%AE%A4%E8%AF%AD%E8%A8%80\" aria-label=\"改变默认语言 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>改变默认语言</h2>\n<p>如果要把 Theia 应用部署到特定的地区，你需要改变默认语言，要做到这一点，需在 <code class=\"language-text\">package.json</code> 中的 Theia 配置中添加 <code class=\"language-text\">defaultLocale</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"theia\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"frontend\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"config\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token property\">\"defaultLocale\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zh-cn\"</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>用户在第一次启动 Theia 应用时，地域将自动设置为选定的默认值。用户仍然可以使用 <code class=\"language-text\">Configure Display Language</code> 命令改变语言。</p>","fields":{"slug":"i18n"}}},"pageContext":{"slug":"i18n"}},"staticQueryHashes":["2468095761"]}