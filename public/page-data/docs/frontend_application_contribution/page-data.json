{"componentChunkName":"component---src-templates-doc-js","path":"/docs/frontend_application_contribution","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Frontend Application Contributions"},"html":"<h1 id=\"前端扩展点\" style=\"position:relative;\"><a href=\"#%E5%89%8D%E7%AB%AF%E6%89%A9%E5%B1%95%E7%82%B9\" aria-label=\"前端扩展点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前端扩展点</h1>\n<p>前端扩展点可对 Theia 前端生命周期事件做出响应，在前端启动或停止之前，或在前端布局初始化时执行对应的行为。\n除了提供常规的的启动钩子，前端扩展点通常还用于打开和管理视图、注册监听、添加状态栏条目，或者在应用启动时自定义外观布局。\n另一个使用场景是对做出响应，例如，在退出时存储某些数据，比如使用：<code class=\"language-text\">StorageService</code>。</p>\n<p>和其他前端扩展一样，前端应用贡献也是通过绑定 <code class=\"language-text\">FrontendApplicationContribution</code> 接口的实现在前端模块中注册。</p>\n<p>一个典型的场景是在启动时总是打开的某个视图。</p>\n<p>因此，视图的实现不仅扩展了 <code class=\"language-text\">AbstractViewContribution&lt;MyWidget></code>，而且还被注册为 <code class=\"language-text\">FrontendApplicationContribution</code>，以便在应用外观布局初始化后打开扩展视图。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ContainerModule</span><span class=\"token punctuation\">(</span>bind <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   …\n   <span class=\"token function\">bindViewContribution</span><span class=\"token punctuation\">(</span>bind<span class=\"token punctuation\">,</span> MyViewContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>FrontendApplicationContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toService</span><span class=\"token punctuation\">(</span>MyViewContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>除了视图实现本身，视图现在可以从 <code class=\"language-text\">FrontendApplicationContribution</code> 接口实现 <code class=\"language-text\">initializeLayout(app: FrontendApplication)</code> 方法，以便在布局初始化后打开。</p>\n<p>注意，这个方法只在没有先前存储的工作台布局时才会调用，这使得它成为初始化工作台的理想选择，因为它不会覆盖用户在先前会话中已经手动应用的布局变化。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyViewContribution</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractViewContribution<span class=\"token operator\">&lt;</span>MyViewWidget<span class=\"token operator\">></span></span>\n    <span class=\"token keyword\">implements</span> <span class=\"token class-name\">FrontendApplicationContribution</span> <span class=\"token punctuation\">{</span>\n   …\n   <span class=\"token keyword\">async</span> <span class=\"token function\">initializeLayout</span><span class=\"token punctuation\">(</span>app<span class=\"token operator\">:</span> FrontendApplication<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">openView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   …\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果前端应用的扩展需要在每次应用启动时调用--而不仅仅是在初始布局后没有先前缓存的布局状态时--可以使用方法<code class=\"language-text\">configure(app: FrontendApplication)</code>和<code class=\"language-text\">onStart(app: FrontendApplication)</code>来代替。\n由于这些方法甚至在应用 shell 被连接或菜单初始化之前调用，你或许想把这些方法与前端状态 service 结合起来使用，这取决于你的：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyViewContribution</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractViewContribution<span class=\"token operator\">&lt;</span>MyViewWidget<span class=\"token operator\">></span></span>\n    <span class=\"token keyword\">implements</span> <span class=\"token class-name\">FrontendApplicationContribution</span> <span class=\"token punctuation\">{</span>\n   …\n   <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">inject</span></span><span class=\"token punctuation\">(</span>FrontendApplicationStateService<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">protected</span> <span class=\"token keyword\">readonly</span> stateService<span class=\"token operator\">:</span> FrontendApplicationStateService<span class=\"token punctuation\">;</span>\n   …\n   <span class=\"token keyword\">async</span> <span class=\"token function\">onStart</span><span class=\"token punctuation\">(</span>app<span class=\"token operator\">:</span> FrontendApplication<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>stateService<span class=\"token punctuation\">.</span><span class=\"token function\">reachedState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ready'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n           <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">openView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> reveal<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>前端应用贡献的另一个典型场景是增加监听器，例如：对偏好设置的变化做出响应，或者在 <code class=\"language-text\">configure(app: FrontendApplication)</code>和<code class=\"language-text\">onStart(app: FrontendApplication)</code> 中分别向应用 shell 添加自定义 widgets。</p>","fields":{"slug":"frontend_application_contribution"}}},"pageContext":{"slug":"frontend_application_contribution"}},"staticQueryHashes":["2468095761"]}