{"componentChunkName":"component---src-templates-doc-js","path":"/docs/tasks","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Tasks"},"html":"<h1 id=\"任务\" style=\"position:relative;\"><a href=\"#%E4%BB%BB%E5%8A%A1\" aria-label=\"任务 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>任务</h1>\n<p>Theia 用户可以执行任务，以便让工作流程中的某些步骤自动化。</p>\n<p>任务可以通过主菜单的 <em>Terminal</em> 或命令面板调用，每个任务都由任务配置来定义，其中指定了任务类型、标签、可选描述、是否为背景任务、是否为构建或测试任务、对其他任务的依赖性等属性。</p>\n<p>Theia 中的任务在结构上与 Visual Studio Code 兼容。与 <a href=\"https://code.visualstudio.com/docs/editor/tasks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Visual Studio Code</a> 类似，用户可以在工作区或用户自定义的一个名为 <code class=\"language-text\">tasks.json</code> 的文件中定义任务。</p>\n<h2 id=\"taskproviders-taskresolvers-and-taskrunners\" style=\"position:relative;\"><a href=\"#taskproviders-taskresolvers-and-taskrunners\" aria-label=\"taskproviders taskresolvers and taskrunners permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TaskProviders, TaskResolvers and TaskRunners</h2>\n<p>在 Theia 中，任务也可以由自定义的扩展提供和执行。特别是，Theia 为任务提供了三个主要贡献点：<code class=\"language-text\">TaskProvider</code>、<code class=\"language-text\">TaskResolver</code> 和 <code class=\"language-text\">TaskRunner</code>。为更好地理解他们，我们看看当用户选择和执行一个任务时的流程，如下图所示：</p>\n<img src=\"/tasks.png\" alt=\"Task flow overview\" style=\"max-width: 915px\">\n<p>除了用户定义的任务，Theia 还向用户提供从任务提供者那里收集的所有任务配置。当用户选择所提供的任务配置并执行时，该配置将被移交给任务服务，任务服务首先用所选的任务类型解析器解析所选任务配置。任务解析器可以在任务配置实际执行之前对其解析，这利于解析默认值和自定义变量。</p>\n<p>一旦配置被解析，任务服务会请求已解析的任务配置，该服务器在后端运行。为了执行已解析的任务配置，任务服务器会查找为该配置的类型注册的任务运行器，最后，任务运行器负责根据指定的任务配置执行任务。</p>\n<p>Theia 为 TaskProviders，TaskResolvers 和 TaskRunners 提供专门的贡献点。因此，Theia 扩展可以自定义任务类型扩展可用的任务列表，处理自定义任务的配置解析和执行。</p>\n<h2 id=\"举例task-providers-和-task-resolvers\" style=\"position:relative;\"><a href=\"#%E4%B8%BE%E4%BE%8Btask-providers-%E5%92%8C-task-resolvers\" aria-label=\"举例task providers 和 task resolvers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>举例：Task Providers 和 Task Resolvers</h2>\n<p>在下面的例子中，我们将贡献一个任务提供者，用来提供自定义任务。此外，我们还添加一个自定义任务解析器，它将在执行前解析任务配置。最后，我们将贡献一个自定义任务运行器，执行任务。</p>\n<p>任务提供者和任务解析器是通过 <code class=\"language-text\">TaskContribution</code> 实现的，像其他贡献一样，必须被绑定在各自的前端模块中，如下所示：</p>\n<p>如果你还不熟悉 Theia 的扩展点或依赖注入的使用，请参考 [服务和贡献] 指南（<a href=\"https://theia-ide.org/docs/services_and_contributions/%EF%BC%89%E3%80%82\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://theia-ide.org/docs/services_and_contributions/）。</a></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ContainerModule</span><span class=\"token punctuation\">(</span>bind <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>TaskContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>MyTaskContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我们的 <code class=\"language-text\">TaskContribution</code> 贡献了一个任务提供者和一个任务解析器（见以下列表），它们的实现如下所示。通过在注册时指定任务类型，Theia 将为我们的自定义任务类型（<code class=\"language-text\">myTaskType</code>）选择合适的解析器和执行器。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTaskContribution</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TaskContribution</span> <span class=\"token punctuation\">{</span>\n\n   <span class=\"token function\">registerProviders</span><span class=\"token punctuation\">(</span>providers<span class=\"token operator\">:</span> TaskProviderRegistry<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n       providers<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myTaskType'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyTaskProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n\n   <span class=\"token function\">registerResolvers</span><span class=\"token punctuation\">(</span>resolvers<span class=\"token operator\">:</span> TaskResolverRegistry<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n       resolvers<span class=\"token punctuation\">.</span><span class=\"token function\">registerTaskResolver</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myTaskType'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyTaskResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>示例中的任务提供者贡献了一个任务：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTaskProvider</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TaskProvider</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">async</span> <span class=\"token function\">provideTasks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>TaskConfiguration<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>\n           label<span class=\"token operator\">:</span> <span class=\"token string\">'My Custom Task'</span><span class=\"token punctuation\">,</span>\n           type<span class=\"token operator\">:</span> <span class=\"token string\">'myTaskType'</span><span class=\"token punctuation\">,</span>\n           _scope<span class=\"token operator\">:</span> <span class=\"token string\">'MyTaskProvider'</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>示例任务解析器总是将属性 <code class=\"language-text\">myCustomValue</code> 设置为静态值 <code class=\"language-text\">42</code>，在实际情况下，它在 <code class=\"language-text\">taskConfig</code> 中被设置，如果没有设置，则使用默认，如果有则使用 <code class=\"language-text\">taskConfig</code> 中指定的变量：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTaskResolver</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TaskResolver</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">resolveTask</span><span class=\"token punctuation\">(</span>taskConfig<span class=\"token operator\">:</span> TaskConfiguration<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>TaskConfiguration<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>taskConfig<span class=\"token punctuation\">,</span> myCustomValue<span class=\"token operator\">:</span> <span class=\"token number\">42</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"案例task-runners\" style=\"position:relative;\"><a href=\"#%E6%A1%88%E4%BE%8Btask-runners\" aria-label=\"案例task runners permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>案例：Task Runners</h2>\n<p>任务运行器是通过 <code class=\"language-text\">TaskRunnerContribution</code> 贡献的，由于使用依赖注入创建的任务运行器，需要我们在模块中绑定贡献和任务运行器：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ContainerModule</span><span class=\"token punctuation\">(</span>bind <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>MyTaskRunner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toSelf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">inSingletonScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>TaskRunnerContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>MyTaskRunnerContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在 <code class=\"language-text\">TaskRunnerContribution</code> 中，我们在 <code class=\"language-text\">TaskRunnerRegistry</code> 注册了自定义任务运行器的实例，以及运行器负责的任务类型。</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTaskRunnerContribution</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TaskRunnerContribution</span> <span class=\"token punctuation\">{</span>\n\n   <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">inject</span></span><span class=\"token punctuation\">(</span>MyTaskRunner<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">protected</span> <span class=\"token keyword\">readonly</span> myTaskRunner<span class=\"token operator\">:</span> MyTaskRunner<span class=\"token punctuation\">;</span>\n\n   <span class=\"token function\">registerRunner</span><span class=\"token punctuation\">(</span>runners<span class=\"token operator\">:</span> TaskRunnerRegistry<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n       runners<span class=\"token punctuation\">.</span><span class=\"token function\">registerRunner</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myTaskType'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myTaskRunner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>任务运行者需要实现 <code class=\"language-text\">TaskRunner</code> 接口，当任务被触发时，函数 <code class=\"language-text\">run</code> 接收 <code class=\"language-text\">TaskConfiguration</code>，并运行该操作。</p>\n<p>在我们的例子中，实例化了 <code class=\"language-text\">Task</code> 的自定义实现，名为<code class=\"language-text\">MyTask</code>，并以当前配置执行。</p>\n<p>使用现有的接口 <code class=\"language-text\">Task</code> 允许我们将任务连接到 <code class=\"language-text\">TaskManager</code>，在任务执行过程中会在工作台中显示进展（见下面的屏幕截图）：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTaskRunner</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TaskRunner</span> <span class=\"token punctuation\">{</span>\n\n   <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">inject</span></span><span class=\"token punctuation\">(</span>TaskManager<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">protected</span> <span class=\"token keyword\">readonly</span> taskManager<span class=\"token operator\">:</span> TaskManager<span class=\"token punctuation\">;</span>\n\n   <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">inject</span></span><span class=\"token punctuation\">(</span>ILogger<span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">protected</span> <span class=\"token keyword\">readonly</span> logger<span class=\"token operator\">:</span> ILogger<span class=\"token punctuation\">;</span>\n\n   <span class=\"token keyword\">async</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> TaskConfiguration<span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span>Task<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">const</span> myTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyTask</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>taskManager<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">,</span>\n                                   <span class=\"token punctuation\">{</span> config<span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> <span class=\"token string\">'My Custom Task'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       myTask<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>myCustomValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">return</span> myTask<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后，自定义任务配置将等待 5000 毫秒打印出之前在任务解析器中添加的自定义值：</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTask</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Task</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>myCustomValue<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Start running custom task: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>myCustomValue<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n           <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Finished running custom task: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>myCustomValue<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n           <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fireTaskExited</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> taskId<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>taskId<span class=\"token punctuation\">,</span> code<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   …\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如下图所示，自定义任务运行了 5000 毫秒（因为我们在 <code class=\"language-text\">MyTask</code> 中设置了超时），然后停止：</p>\n<img src=\"/running-custom-task.gif\" alt=\"Running custom task\" style=\"max-width: 702px\">\n<p>在控制台中可以看到，该任务在 5000 毫秒后启动并完成，并打印了定义解析器添加的自定义变量。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">root INFO Start running custom task: 42\nroot INFO Finished running custom task: 42</code></pre></div>\n<h2 id=\"定义任务\" style=\"position:relative;\"><a href=\"#%E5%AE%9A%E4%B9%89%E4%BB%BB%E5%8A%A1\" aria-label=\"定义任务 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>定义任务</h2>\n<p>扩展可以只提供运行器（以及可选的解析器）不提供任务提供者。</p>\n<p>因此，自定义任务不会自动提供给用户，但用户仍然可以在 <code class=\"language-text\">tasks.json</code> 文件中配置任务，为了支持用户为自定义任务创建任务配置，Theia为 <em>task definitions</em> 提供了专门的扩展点。任务定义用 JSON schema，定义了可以或需要为某个自定义任务指定配置。</p>","fields":{"slug":"tasks"}}},"pageContext":{"slug":"tasks"}},"staticQueryHashes":["2468095761"]}