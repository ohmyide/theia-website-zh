{"componentChunkName":"component---src-templates-doc-js","path":"/docs/commands_keybindings","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Commands/Menus/Keybindings"},"html":"<h1 id=\"命令菜单以及快捷键\" style=\"position:relative;\"><a href=\"#%E5%91%BD%E4%BB%A4%E8%8F%9C%E5%8D%95%E4%BB%A5%E5%8F%8A%E5%BF%AB%E6%8D%B7%E9%94%AE\" aria-label=\"命令菜单以及快捷键 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>命令、菜单以及快捷键</h1>\n<p>命令由 ID 和对应的执行函数组成（以及一些可选参数，如名称或图标）。命令可以通过命令面板触发，它们可以绑定到键绑定或菜单项，并且可以通过程序调用。命令触发的动作是与执行环境紧密相连的，因此它们只能在特定条件下调用（如：窗口被选中、当前项被选择等）。</p>\n<p>以下部分介绍如何提供命令、快捷键绑定和菜单项的详细信息，将描述如何使用不同的贡献点以及如何使用相应的服务来管理这些选项。</p>\n<p>如果你还不熟悉 Theia 中的贡献点或依赖注入的使用，请参考 [Services and Contributions 指南] (<a href=\"https://theia-ide.org/docs/services_and_contributions/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://theia-ide.org/docs/services_and_contributions/</a>)。</p>\n<p>以下所有代码示例均来自 <a href=\"https://github.com/eclipse-theia/generator-theia-extension\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Theia 扩展生成器</a>。你可以用生成器生成通用的代码（“Hello World”示例）</p>\n<h2 id=\"创建命令\" style=\"position:relative;\"><a href=\"#%E5%88%9B%E5%BB%BA%E5%91%BD%E4%BB%A4\" aria-label=\"创建命令 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>创建命令</h2>\n<p>通过命令贡献点，你可以向 Theia 添加自定义操作。用户可以通过命令面板、快捷键绑定或菜单条目触发命令，同样也可以通过代码调用。</p>\n<p>Theia 应用的所有命令都在 <code class=\"language-text\">CommandRegistry</code> 中管理。要向命令注册表中贡献命令，模块必须实现 <code class=\"language-text\">CommandContribution</code> 接口（参见下面的代码示例）。</p>\n<p>命令是由一个包含 <code class=\"language-text\">id</code> 和一个用户可选的 <code class=\"language-text\">label</code> 对象组成（参见下面示例中的 HelloworldCommand）。 命令贡献接收 <code class=\"language-text\">registerCommands</code> 函数中的 <code class=\"language-text\">CommandRegistry</code> 作为参数。 然后以此调用 <code class=\"language-text\">registerCommand</code> 来注册该命令。除了命令之外，还需要提供一个回调，该回调在命令被触发时执行（<code class=\"language-text\">CommandHandler</code>）。 在示例中，该命令使用 MessageService 来实现 “say hello”。</p>\n<p><strong>helloworld-contribution.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> HelloworldCommand<span class=\"token operator\">:</span> Command <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   id<span class=\"token operator\">:</span> <span class=\"token string\">'Helloworld.command'</span><span class=\"token punctuation\">,</span>\n   label<span class=\"token operator\">:</span> <span class=\"token string\">\"Say Hello\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloworldCommandContribution</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">CommandContribution</span> <span class=\"token punctuation\">{</span>\n \n   <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>\n       <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">inject</span></span><span class=\"token punctuation\">(</span>MessageService<span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> messageService<span class=\"token operator\">:</span> MessageService<span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n \n   <span class=\"token function\">registerCommands</span><span class=\"token punctuation\">(</span>registry<span class=\"token operator\">:</span> CommandRegistry<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n       registry<span class=\"token punctuation\">.</span><span class=\"token function\">registerCommand</span><span class=\"token punctuation\">(</span>HelloworldCommand<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n           <span class=\"token function-variable function\">execute</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messageService<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>为了使命令执行上下文更加可控，<code class=\"language-text\">CommandHandler</code> 可以选择实现 <code class=\"language-text\">isEnabled</code> 和 <code class=\"language-text\">isVisible</code>。您可以选择注册多个 <code class=\"language-text\">CommandHandler</code> 并让命令根据当前上下文执行其中一个。要为命令注册其他处理程序，请使用 <code class=\"language-text\">CommandRegistry</code> 上的 <code class=\"language-text\">registerHandler</code> 函数\n执行命令时，命令注册表会检查所有已注册的处理程序。在 <code class=\"language-text\">isEnabled</code> 上返回 true 的第一个处理函数视为活跃状态，并将被执行，且同一时刻应该只有一个处理函数处于活跃状态（<code class=\"language-text\">isEnabled === true</code>）。 <code class=\"language-text\">isVisible</code> 控制连接到命令的菜单项和工具项是否可见，以及命令是否显示在命令面板中。如果行为处理函数返回 true，则菜单项将可见，反之亦然。\n最后，通过实现 <code class=\"language-text\">isToggle</code>，处理函数可以选择绑定命令的菜单项是打开还是关闭。</p>\n<h3 id=\"绑定到-commandcontribution-贡献点\" style=\"position:relative;\"><a href=\"#%E7%BB%91%E5%AE%9A%E5%88%B0-commandcontribution-%E8%B4%A1%E7%8C%AE%E7%82%B9\" aria-label=\"绑定到 commandcontribution 贡献点 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>绑定到 CommandContribution 贡献点</h3>\n<p>为了让我们的 <code class=\"language-text\">CommandContribution</code> 能够被 Theia 访问，我们需要将自定义的 <code class=\"language-text\">HelloworldCommandContribution</code> 与对应的贡献点标识符 <code class=\"language-text\">CommandContribution</code> 绑定。这是在 <code class=\"language-text\">helloworld-frontend-module</code> 中实现的，更多细节见 <a href=\"https://theia-ide.org/docs/services_and_contributions/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Services and Contributions</a>。</p>\n<p><strong>helloworld-frontend-module.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ContainerModule</span><span class=\"token punctuation\">(</span>bind <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token comment\">// add your contribution bindings here</span>\n   <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>CommandContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>HelloworldCommandContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>上述用来注册命令的 <code class=\"language-text\">CommandRegistry</code> 也提供了与命令交互的 API。例如，你可以用代码方式执行命令，可以浏览所有注册的命令，可以访问最近执行的命令列表。更多细节请参考<a href=\"https://eclipse-theia.github.io/theia/docs/next/classes/core.commandregistry-1.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TypeDoc for the CommandRegistry</a>。要在贡献点之外使用 <code class=\"language-text\">CommandRegistry</code>，你可以通过依赖注入来访问它。</p>\n<p>在下面的章节中，我们将阐述如何将命令与菜单项、快捷键绑定。</p>\n<h2 id=\"扩展菜单项\" style=\"position:relative;\"><a href=\"#%E6%89%A9%E5%B1%95%E8%8F%9C%E5%8D%95%E9%A1%B9\" aria-label=\"扩展菜单项 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>扩展菜单项</h2>\n<p>Theia允许扩展菜单项，这些菜单项将显示在 Theia 应用程序的特定菜单中。菜单项与命令绑定，用户可以此触发动作（请见上面关于命令的部分）。</p>\n<p>下面所有的代码例子由 <a href=\"https://github.com/eclipse-theia/generator-theia-extension\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Theia extension generator</a> 产出，你可以通过安装生成器，选择\"helloworld \"作为名称来产出同样的代码，<a href=\"https://github.com/eclipse-theia/generator-theia-extension\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>。</p>\n<p>Theia 应用的所有菜单项都在 MenuModelRegistry 中管理。为了向注册表中贡献菜单项，模块必须实现 \"MenuContribution\"接口（见下面的代码示例）。</p>\n<p>命令的注册可以在函数 registerMenus 中完成，它在 Theia 框架中调用，该函数以 MenuModelRegistry 作为参数，在这个注册表上，我们可以调用 registerMenuAction。它的参数有MenuPath 和 MenuAction，MenuPath 指定了要放置菜单项的菜单（和子菜单）。关于一些常见菜单的路径，<a href=\"https://eclipse-theia.github.io/theia/docs/next/modules/core.commonmenus-1.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">请点击这里</a>。</p>\n<p>MenuAction 包含一个命令 ID，和一个可选的 label 标签，分别用于指定要触发的命令和菜单项。</p>\n<p><strong>helloworld-contribution.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloworldMenuContribution</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MenuContribution</span> <span class=\"token punctuation\">{</span>\n \n   <span class=\"token function\">registerMenus</span><span class=\"token punctuation\">(</span>menus<span class=\"token operator\">:</span> MenuModelRegistry<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n       menus<span class=\"token punctuation\">.</span><span class=\"token function\">registerMenuAction</span><span class=\"token punctuation\">(</span>CommonMenus<span class=\"token punctuation\">.</span><span class=\"token constant\">EDIT_FIND</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n           commandId<span class=\"token operator\">:</span> HelloworldCommand<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n           label<span class=\"token operator\">:</span> HelloworldCommand<span class=\"token punctuation\">.</span>label\n       <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>为了让 <code class=\"language-text\">MenuContribution</code> 能够被 Theia 访问，我们需要将自定义的 <code class=\"language-text\">HelloWorldMenuContribution</code> 与对应的贡献点标识符 <code class=\"language-text\">MenuContribution</code> 绑定。这是在<code class=\"language-text\">helloworld-frontend-module</code>中完成的，更多细节见<a href=\"https://theia-ide.org/docs/services_and_contributions/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Services and Contributions</a>。</p>\n<p><strong>helloworld-contribution.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ContainerModule</span><span class=\"token punctuation\">(</span>bind <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>MenuContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>HelloworldMenuContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>注意，你也可以创建没有命令的菜单项，这允许你创建自定义的顶层菜单和子菜单。要做到这一点，请先新建一个没有命令的菜单项，然后在其他贡献中引用这个菜单项的 id 作为 <code class=\"language-text\">MenuPath</code>。这将为你的自定义菜单添加菜单项。</p>\n<h2 id=\"实现快捷键绑定\" style=\"position:relative;\"><a href=\"#%E5%AE%9E%E7%8E%B0%E5%BF%AB%E6%8D%B7%E9%94%AE%E7%BB%91%E5%AE%9A\" aria-label=\"实现快捷键绑定 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>实现快捷键绑定</h2>\n<p>快捷键绑定允许用户使用特定的按键组合来触发命令。快捷键绑定可以定义条件，指定它们何时被激活。比如：有一些快捷键，只有当文本编辑器被聚焦时才会激活。</p>\n<p>需注意，下面的代码例子不是生成的模板的一部分，你需要手动编辑它们（见前面的章节）。</p>\n<p>要开发一个快捷键绑定，需实现 <code class=\"language-text\">KeybindingContribution</code> 接口（见下面的代码例子），通过它可以访问 <code class=\"language-text\">KeybindingRegistry</code> 来实现快捷键注册。快捷键由以下部分组成。</p>\n<ul>\n<li><code class=\"language-text\">keybinding</code>: 快捷键组合</li>\n<li><code class=\"language-text\">command</code>: 要触发的命令ID</li>\n<li><code class=\"language-text\">when</code>(可选): 快捷键被激活的条件</li>\n</ul>\n<p><strong>helloworld-keybinding-contribution.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloworldKeybindingContribution</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">KeybindingContribution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">registerKeybindings</span><span class=\"token punctuation\">(</span>keybindings<span class=\"token operator\">:</span> KeybindingRegistry<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n        keybindings<span class=\"token punctuation\">.</span><span class=\"token function\">registerKeybinding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            keybinding<span class=\"token operator\">:</span> <span class=\"token string\">\"alt+enter\"</span><span class=\"token punctuation\">,</span>\n            command<span class=\"token operator\">:</span> <span class=\"token string\">'Helloworld.command'</span><span class=\"token punctuation\">,</span>\n            when<span class=\"token operator\">:</span> <span class=\"token string\">'editorFocus &amp;&amp; editorIsOpen'</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上述 <code class=\"language-text\">when</code> 配置遵循 <a href=\"https://code.visualstudio.com/docs/getstarted/keybindings#_when-clause-contexts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">VS Code terminology</a>。键盘映射做到了平台兼容，在OS X上是Command，在Windows/Linux上是 CTRL。键值数据可以在<a href=\"https://eclipse-theia.github.io/theia/docs/next/modules/core.key-2.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">Key</code> documentation</a>中查看。</p>\n<p>和之前的贡献点绑定方式一样，快捷键的贡献也需要绑定到 <code class=\"language-text\">KeybindingContribution</code> 上，以便让 Theia 能够访问到。</p>\n<p><strong>editor-frontend-module.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ContainerModule</span><span class=\"token punctuation\">(</span>bind <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>KeybindingContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>HelloworldKeybindingContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","fields":{"slug":"commands_keybindings"}}},"pageContext":{"slug":"commands_keybindings"}},"staticQueryHashes":["2468095761"]}