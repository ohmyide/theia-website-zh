{"componentChunkName":"component---src-templates-doc-js","path":"/docs/label_provider","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Label Provider"},"html":"<h1 id=\"标签提供者\" style=\"position:relative;\"><a href=\"#%E6%A0%87%E7%AD%BE%E6%8F%90%E4%BE%9B%E8%80%85\" aria-label=\"标签提供者 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>标签提供者</h1>\n<p>Theia 中的标签提供者负责元素/节点在用户界面中的显示方式。标签提供者决定显示在树、列表或其他位置（如视图标题）的元素图标和文本。一个很好的案例是文件资源管理器：文件和目录节点从标签提供者那里获取它们的图标和文本。另一个使用标签提供者的案例是编辑器的页眉。请看 <a href=\"https://eclipse-theia.github.io/theia/docs/next/classes/core.labelprovider-1.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LabelProvider TypeDoc</a>。</p>\n<p>Theia 的默认标签提供者会先检索已注册的标签提供者，以确定最适合的元素/节点标签。标签提供者会将特定节点的调用委托给能够最好地处理该元素的贡献。Theia 为常见的类型提供了默认贡献，例如：文件类型。通过自己的贡献，可以根据特定的标准来扩展或调整节点的外观。</p>\n<p>本篇，我们将介绍如何在 Theia 中定制自定义文件类型（.my）的标签和图标，如下图所示：</p>\n<img src=\"/custom-label-provider.png\" alt=\"A custom label provider\" style=\"max-width: 525px\">\n<p>如果你还不熟悉 Theia 的贡献点或依赖注入的使用，请参考 <a href=\"https://theia-ide.org/docs/services_and_contributions/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">服务和贡献</a>指南。</p>\n<p>下面所有的代码都来自 <a href=\"https://github.com/eclipse-theia/generator-theia-extension\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Theia 扩展生成器</a>。可以通过安装生成器，选择 \"标签提供者\" 的例子（<a href=\"https://github.com/eclipse-theia/generator-theia-extension\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">见这里</a>）并选择 \"labelProvider\" 作为名称来获得同样的代码。</p>\n<h2 id=\"贡献一个标签提供者\" style=\"position:relative;\"><a href=\"#%E8%B4%A1%E7%8C%AE%E4%B8%80%E4%B8%AA%E6%A0%87%E7%AD%BE%E6%8F%90%E4%BE%9B%E8%80%85\" aria-label=\"贡献一个标签提供者 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>贡献一个标签提供者</h2>\n<p>要贡献自定义的标签提供者，你需要提供一个 <code class=\"language-text\">LabelProviderContribution</code>，即一个实现该接口的类。在这个例子中，我们没有直接实现这个接口，而是扩展了文件 <code class=\"language-text\">FileTreeLabelProvider</code> 的默认实现，这允许我们只重写我们想要重写的行为。</p>\n<p><strong>labelprovider-contribution.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LabelproviderLabelProviderContribution</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">FileTreeLabelProvider</span></code></pre></div>\n<p>函数 <code class=\"language-text\">canHandle</code> 决定了标签提供者是否为特定的节点（在我们的例子中为\".my\"文件），它可以检测文件的所有状态，比如：扩展名。该函数的返回值是一个代表标签提供者贡献的优先级的整数，具有最高优先级的将被使用，因此你可以通过返回更高的优先级来覆盖自定义文件上的默认标签提供者贡献。</p>\n<p><code class=\"language-text\">canHandle</code> 函数接收一个文件对象作为参数（对于文件树来说是 <code class=\"language-text\">FileStatNode</code>）。请看下面 canHandle 的实现例子，它将为文件扩展名\".my\"注册一个标签提供者贡献。</p>\n<p><strong>labelprovider-contribution.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">canHandle</span><span class=\"token punctuation\">(</span>element<span class=\"token operator\">:</span> object<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>FileStatNode<span class=\"token punctuation\">.</span><span class=\"token keyword\">is</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> uri <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>uri<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>ext <span class=\"token operator\">===</span> <span class=\"token string\">'.my'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">canHandle</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>标签提供者注册自定义文件扩展名时，可以选择实现 <code class=\"language-text\">getName</code>、<code class=\"language-text\">getIcon</code>和<code class=\"language-text\">getLongName</code>，这些功能接收 URI 作为参数，并返回相应文件的自定义图标和名称。图标和名称在 Theia 的文件视图中使用，在编辑器打开的文件中，当悬停在文件上时，文件全名（在本例中没有定制）将作为 tooltip 显示。更多细节，请参见<a href=\"https://eclipse-theia.github.io/theia/docs/next/interfaces/core.labelprovidercontribution-1.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code class=\"language-text\">LabelProviderContribution</code> TypeDoc</a></p>\n<p><strong>labelprovider-contribution.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">getIcon</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'fa fa-star-o'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">getName</span><span class=\"token punctuation\">(</span>fileStatNode<span class=\"token operator\">:</span> FileStatNode<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span>fileStatNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' (with my label)'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>为了使我们的 <code class=\"language-text\">LabelProviderContribution</code> 能够被 Theia 访问，我们需要将自定义的 <code class=\"language-text\">LabelProviderLabelProviderContribution</code> 与各自的贡献符号 <code class=\"language-text\">LabelProviderContribution</code> 绑定。这是在 <code class=\"language-text\">Labelprovider-frontend-module</code> 中完成的，更多细节见<a href=\"https://theia-ide.org/docs/services_and_contributions/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">服务和贡献</a>。</p>\n<p><strong>labelprovider-frontend-module.ts</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ContainerModule</span><span class=\"token punctuation\">(</span>bind <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// label binding</span>\n    <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>LabelProviderContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">to</span><span class=\"token punctuation\">(</span>LabelProviderLabelProviderContribution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"通过-css-设定自定义图标\" style=\"position:relative;\"><a href=\"#%E9%80%9A%E8%BF%87-css-%E8%AE%BE%E5%AE%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E6%A0%87\" aria-label=\"通过 css 设定自定义图标 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>通过 CSS 设定自定义图标</h2>\n<p><code class=\"language-text\">getIcon</code> 函数返回 CSS 字符串，用于识别自定义文件类型的图标。在上面的例子中，我们使用了 Font Awesome 图标，如果你想用自定义图标，需要在 CSS 中进行设置。通常情况下，图标会有多个版本，这取决于当前风格（深色或浅色）。下面的例子演示如何添加一个自定义图标，要用这个例子，请将上面的 <code class=\"language-text\">getIcon</code> 中返回的字符串替换为 'my-icon'。</p>\n<p><strong>example.css</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.my-icon</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-repeat</span><span class=\"token punctuation\">:</span> no-repeat<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> 12px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 13px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 13px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.light-plus .my-icon</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'./custom_icon_black_18dp.png'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\">.dark-plus .my-icon</span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string url\">'./custom_icon_white_18dp.png'</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"label_provider"}}},"pageContext":{"slug":"label_provider"}},"staticQueryHashes":["2468095761"]}